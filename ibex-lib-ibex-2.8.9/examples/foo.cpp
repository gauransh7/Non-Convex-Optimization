#include "ibex.h"

using namespace std;
using namespace ibex;

// lower bound on eigen value of Interval Matrix
double minEigenValueIntervalMatrix(IntervalMatrix &Im)
{
    int sz = Im.nb_rows();
    double min_eigen = POS_INFINITY;
    for(int i = 0 ; i < sz ; i++){
        int sum = 0;
        for(int j = 0 ; j < sz ; j++){
            if(j!=i){
                sum+=max(abs(Im[i][j].lb()),abs(Im[i][j].ub()));
            }
        }
        min_eigen = min(min_eigen, Im[i][i].lb()-sum);
    }
    return min_eigen;
}

int main(int argc, char **argv)
{
    string func = "(-1+0.01*x(16))*(-1+0.01*x(16))+(-1+0.007143*x(17))*(-1+0.007143*x(17))+(-1+0.008333*x(18))*(-1+0.008333*x(18))+(-1+0.05*x(19))*(-1+0.05*x(19))+(-1+0.05*x(20))*(-1+0.05*x(20))+(-1+0.005*x(21))*(-1+0.005*x(21))+(-1+0.005556*x(22))*(-1+0.005556*x(22))+(-1+0.05*x(23))*(-1+0.05*x(23))+(-1+0.001667*x(24))*(-1+0.001667*x(24))+(-1+0.025*x(25))*(-1+0.025*x(25))+(-1+0.02*x(26))*(-1+0.02*x(26))+(-1+0.033333*x(27))*(-1+0.033333*x(27))+(-1+0.014286*x(28))*(-1+0.014286*x(28))+(-1+0.006667*x(29))*(-1+0.006667*x(29))+(-1+0.05*x(30))*(-1+0.05*x(30))+(-1+0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(-1+0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))+(-1+0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(-1+0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))+(-1+0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(-1+0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))+(-10000+2637.36263736264*x(6)+4395.60439560439*x(7)+4615.38461538462*x(8)+1978.02197802198*x(9)+3516.48351648352*x(10)+219.78021978022*x(11)+439.56043956044*x(13)+10.989010989011*x(26)+10.989010989011*x(29))*(-1+0.263736263736264*x(6)+0.439560439560439*x(7)+0.461538461538462*x(8)+0.197802197802198*x(9)+0.351648351648352*x(10)+0.021978021978022*x(11)+0.043956043956044*x(13)+0.0010989010989011*x(26)+0.0010989010989011*x(29))+(-10000+1142.85714285714*x(11)+3428.57142857143*x(12)+2285.71428571429*x(13)+57.1428571428571*x(26)+57.1428571428571*x(27)+57.1428571428571*x(29))*(-1+0.114285714285714*x(11)+0.342857142857143*x(12)+0.228571428571429*x(13)+0.00571428571428571*x(26)+0.00571428571428571*x(27)+0.00571428571428571*x(29))+(-10000+1044.3864229765*x(1)+2506.5274151436*x(2)+626.631853785901*x(3)+1879.8955613577*x(4)+2924.2819843342*x(5)+2088.772845953*x(7)+2193.21148825065*x(8)+939.947780678851*x(9)+1671.0182767624*x(10)+208.8772845953*x(13)+5.22193211488251*x(24)+5.22193211488251*x(29))*(-1+0.10443864229765*x(1)+0.25065274151436*x(2)+0.0626631853785901*x(3)+0.18798955613577*x(4)+0.29242819843342*x(5)+0.2088772845953*x(7)+0.219321148825065*x(8)+0.0939947780678851*x(9)+0.16710182767624*x(10)+0.02088772845953*x(13)+0.000522193211488251*x(24)+0.000522193211488251*x(29))+(-10000+22.2222222222222*x(16)+22.2222222222222*x(21)+22.2222222222222*x(24))*(-1+0.00222222222222222*x(16)+0.00222222222222222*x(21)+0.00222222222222222*x(24))+(-10000+7692.30769230769*x(1)+38.4615384615385*x(17)+38.4615384615385*x(22))*(-1+0.769230769230769*x(1)+0.00384615384615385*x(17)+0.00384615384615385*x(22))+(-10000+15000*x(14)+2500*x(15)+125*x(30))*(-1+1.5*x(14)+0.25*x(15)+0.0125*x(30))+(-10000+7164.17910447761*x(2)+5970.14925373134*x(7)+14.9253731343284*x(18)+14.9253731343284*x(23)+14.9253731343284*x(26)+14.9253731343284*x(27)+14.9253731343284*x(28)+14.9253731343284*x(29)+14.9253731343284*x(30))*(-1+0.716417910447761*x(2)+0.597014925373134*x(7)+0.00149253731343284*x(18)+0.00149253731343284*x(23)+0.00149253731343284*x(26)+0.00149253731343284*x(27)+0.00149253731343284*x(28)+0.00149253731343284*x(29)+0.00149253731343284*x(30))+(-10000+1379.31034482759*x(1)+3310.34482758621*x(2)+2482.75862068966*x(4)+3862.06896551724*x(5)+2758.62068965517*x(7)+1241.37931034483*x(9)+2206.89655172414*x(10)+6.89655172413793*x(16)+6.89655172413793*x(17)+6.89655172413793*x(18)+6.89655172413793*x(19)+6.89655172413793*x(20))*(-1+0.137931034482759*x(1)+0.331034482758621*x(2)+0.248275862068966*x(4)+0.386206896551724*x(5)+0.275862068965517*x(7)+0.124137931034483*x(9)+0.220689655172414*x(10)+0.000689655172413793*x(16)+0.000689655172413793*x(17)+0.000689655172413793*x(18)+0.000689655172413793*x(19)+0.000689655172413793*x(20))+(-10000+4848.48484848485*x(2)+5656.56565656566*x(5)+4040.40404040404*x(7)+3232.32323232323*x(10)+202.020202020202*x(15)+10.1010101010101*x(18)+10.1010101010101*x(20)+10.1010101010101*x(23)+10.1010101010101*x(25))*(-1+0.484848484848485*x(2)+0.565656565656566*x(5)+0.404040404040404*x(7)+0.323232323232323*x(10)+0.0202020202020202*x(15)+0.00101010101010101*x(18)+0.00101010101010101*x(20)+0.00101010101010101*x(23)+0.00101010101010101*x(25))+(0.4*x(2)-1.6*x(1)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(2)-0.8*x(1)+0.2*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)-1.6*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(1)-0.8*x(2)+0.2*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)-1.6*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(1)+0.2*x(2)-0.8*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)+0.4*x(3)-1.6*x(4)+0.4*x(5))*(0.2*x(1)+0.2*x(2)+0.2*x(3)-0.8*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)-1.6*x(5))*(0.2*x(1)+0.2*x(2)+0.2*x(3)+0.2*x(4)-0.8*x(5))+(0.4*x(7)-1.6*x(6)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(7)-0.8*x(6)+0.2*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)-1.6*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(6)-0.8*x(7)+0.2*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)-1.6*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(6)+0.2*x(7)-0.8*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)+0.4*x(8)-1.6*x(9)+0.4*x(10))*(0.2*x(6)+0.2*x(7)+0.2*x(8)-0.8*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)-1.6*x(10))*(0.2*x(6)+0.2*x(7)+0.2*x(8)+0.2*x(9)-0.8*x(10))+(0.4*x(12)-1.6*x(11)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(12)-0.8*x(11)+0.2*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)-1.6*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(11)-0.8*x(12)+0.2*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)-1.6*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(11)+0.2*x(12)-0.8*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)+0.4*x(13)-1.6*x(14)+0.4*x(15))*(0.2*x(11)+0.2*x(12)+0.2*x(13)-0.8*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)-1.6*x(15))*(0.2*x(11)+0.2*x(12)+0.2*x(13)+0.2*x(14)-0.8*x(15))";
    // string func = "(-1+0.01*x(16))*(-1+0.01*x(16))+(-1+0.007143*x(17))*(-1+0.007143*x(17))+(-1+0.008333*x(18))*(-1+0.008333*x(18))+(-1+0.05*x(19))*(-1+0.05*x(19))+(-1+0.05*x(20))*(-1+0.05*x(20))+(-1+0.005*x(21))*(-1+0.005*x(21))+(-1+0.005556*x(22))*(-1+0.005556*x(22))+(-1+0.05*x(23))*(-1+0.05*x(23))+(-1+0.001667*x(24))*(-1+0.001667*x(24))+(-1+0.025*x(25))*(-1+0.025*x(25))+(-1+0.02*x(26))*(-1+0.02*x(26))+(-1+0.033333*x(27))*(-1+0.033333*x(27))+(-1+0.014286*x(28))*(-1+0.014286*x(28))+(-1+0.006667*x(29))*(-1+0.006667*x(29))+(-1+0.05*x(30))*(-1+0.05*x(30))+(-1+0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(-1+0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))+(-1+0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(-1+0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))+(-1+0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(-1+0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))+(-10000+2637.36263736264*x(6)+4395.60439560439*x(7)+4615.38461538462*x(8)+1978.02197802198*x(9)+3516.48351648352*x(10)+219.78021978022*x(11)+439.56043956044*x(13)+10.989010989011*x(26)+10.989010989011*x(29))*(-1+0.263736263736264*x(6)+0.439560439560439*x(7)+0.461538461538462*x(8)+0.197802197802198*x(9)+0.351648351648352*x(10)+0.021978021978022*x(11)+0.043956043956044*x(13)+0.0010989010989011*x(26)+0.0010989010989011*x(29))+(-10000+1142.85714285714*x(11)+3428.57142857143*x(12)+2285.71428571429*x(13)+57.1428571428571*x(26)+57.1428571428571*x(27)+57.1428571428571*x(29))*(-1+0.114285714285714*x(11)+0.342857142857143*x(12)+0.228571428571429*x(13)+0.00571428571428571*x(26)+0.00571428571428571*x(27)+0.00571428571428571*x(29))+(-10000+1044.3864229765*x(1)+2506.5274151436*x(2)+626.631853785901*x(3)+1879.8955613577*x(4)+2924.2819843342*x(5)+2088.772845953*x(7)+2193.21148825065*x(8)+939.947780678851*x(9)+1671.0182767624*x(10)+208.8772845953*x(13)+5.22193211488251*x(24)+5.22193211488251*x(29))*(-1+0.10443864229765*x(1)+0.25065274151436*x(2)+0.0626631853785901*x(3)+0.18798955613577*x(4)+0.29242819843342*x(5)+0.2088772845953*x(7)+0.219321148825065*x(8)+0.0939947780678851*x(9)+0.16710182767624*x(10)+0.02088772845953*x(13)+0.000522193211488251*x(24)+0.000522193211488251*x(29))+(-10000+22.2222222222222*x(16)+22.2222222222222*x(21)+22.2222222222222*x(24))*(-1+0.00222222222222222*x(16)+0.00222222222222222*x(21)+0.00222222222222222*x(24))+(-10000+7692.30769230769*x(1)+38.4615384615385*x(17)+38.4615384615385*x(22))*(-1+0.769230769230769*x(1)+0.00384615384615385*x(17)+0.00384615384615385*x(22))+(-10000+15000*x(14)+2500*x(15)+125*x(30))*(-1+1.5*x(14)+0.25*x(15)+0.0125*x(30))+(-10000+7164.17910447761*x(2)+5970.14925373134*x(7)+14.9253731343284*x(18)+14.9253731343284*x(23)+14.9253731343284*x(26)+14.9253731343284*x(27)+14.9253731343284*x(28)+14.9253731343284*x(29)+14.9253731343284*x(30))*(-1+0.716417910447761*x(2)+0.597014925373134*x(7)+0.00149253731343284*x(18)+0.00149253731343284*x(23)+0.00149253731343284*x(26)+0.00149253731343284*x(27)+0.00149253731343284*x(28)+0.00149253731343284*x(29)+0.00149253731343284*x(30))+(-10000+1379.31034482759*x(1)+3310.34482758621*x(2)+2482.75862068966*x(4)+3862.06896551724*x(5)+2758.62068965517*x(7)+1241.37931034483*x(9)+2206.89655172414*x(10)+6.89655172413793*x(16)+6.89655172413793*x(17)+6.89655172413793*x(18)+6.89655172413793*x(19)+6.89655172413793*x(20))*(-1+0.137931034482759*x(1)+0.331034482758621*x(2)+0.248275862068966*x(4)+0.386206896551724*x(5)+0.275862068965517*x(7)+0.124137931034483*x(9)+0.220689655172414*x(10)+0.000689655172413793*x(16)+0.000689655172413793*x(17)+0.000689655172413793*x(18)+0.000689655172413793*x(19)+0.000689655172413793*x(20))+(-10000+4848.48484848485*x(2)+5656.56565656566*x(5)+4040.40404040404*x(7)+3232.32323232323*x(10)+202.020202020202*x(15)+10.1010101010101*x(18)+10.1010101010101*x(20)+10.1010101010101*x(23)+10.1010101010101*x(25))*(-1+0.484848484848485*x(2)+0.565656565656566*x(5)+0.404040404040404*x(7)+0.323232323232323*x(10)+0.0202020202020202*x(15)+0.00101010101010101*x(18)+0.00101010101010101*x(20)+0.00101010101010101*x(23)+0.00101010101010101*x(25))+(0.4*x(2)-1.6*x(1)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(2)-0.8*x(1)+0.2*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)-1.6*x(2)+0.4*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(1)-0.8*x(2)+0.2*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)-1.6*x(3)+0.4*x(4)+0.4*x(5))*(0.2*x(1)+0.2*x(2)-0.8*x(3)+0.2*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)+0.4*x(3)-1.6*x(4)+0.4*x(5))*(0.2*x(1)+0.2*x(2)+0.2*x(3)-0.8*x(4)+0.2*x(5))+(0.4*x(1)+0.4*x(2)+0.4*x(3)+0.4*x(4)-1.6*x(5))*(0.2*x(1)+0.2*x(2)+0.2*x(3)+0.2*x(4)-0.8*x(5))+(0.4*x(7)-1.6*x(6)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(7)-0.8*x(6)+0.2*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)-1.6*x(7)+0.4*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(6)-0.8*x(7)+0.2*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)-1.6*x(8)+0.4*x(9)+0.4*x(10))*(0.2*x(6)+0.2*x(7)-0.8*x(8)+0.2*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)+0.4*x(8)-1.6*x(9)+0.4*x(10))*(0.2*x(6)+0.2*x(7)+0.2*x(8)-0.8*x(9)+0.2*x(10))+(0.4*x(6)+0.4*x(7)+0.4*x(8)+0.4*x(9)-1.6*x(10))*(0.2*x(6)+0.2*x(7)+0.2*x(8)+0.2*x(9)-0.8*x(10))+(0.4*x(12)-1.6*x(11)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(12)-0.8*x(11)+0.2*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)-1.6*x(12)+0.4*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(11)-0.8*x(12)+0.2*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)-1.6*x(13)+0.4*x(14)+0.4*x(15))*(0.2*x(11)+0.2*x(12)-0.8*x(13)+0.2*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)+0.4*x(13)-1.6*x(14)+0.4*x(15))*(0.2*x(11)+0.2*x(12)+0.2*x(13)-0.8*x(14)+0.2*x(15))+(0.4*x(11)+0.4*x(12)+0.4*x(13)+0.4*x(14)-1.6*x(15))*(0.2*x(11)+0.2*x(12)+0.2*x(13)+0.2*x(14)-0.8*x(15))+(14485.055497*0.000000-14485.055497*x(1))*(14485.055497*99999999.000000-14485.055497*x(1))+(14485.055497*0.000000-14485.055497*x(2))*(14485.055497*99999999.000000-14485.055497*x(2))+(14485.055497*0.000000-14485.055497*x(3))*(14485.055497*99999999.000000-14485.055497*x(3))+(14485.055497*0.000000-14485.055497*x(4))*(14485.055497*99999999.000000-14485.055497*x(4))+(14485.055497*0.000000-14485.055497*x(5))*(14485.055497*99999999.000000-14485.055497*x(5))+(14485.055497*0.000000-14485.055497*x(6))*(14485.055497*99999999.000000-14485.055497*x(6))+(14485.055497*0.000000-14485.055497*x(7))*(14485.055497*99999999.000000-14485.055497*x(7))+(14485.055497*0.000000-14485.055497*x(8))*(14485.055497*99999999.000000-14485.055497*x(8))+(14485.055497*0.000000-14485.055497*x(9))*(14485.055497*99999999.000000-14485.055497*x(9))+(14485.055497*0.000000-14485.055497*x(10))*(14485.055497*99999999.000000-14485.055497*x(10))+(14485.055497*0.000000-14485.055497*x(11))*(14485.055497*99999999.000000-14485.055497*x(11))+(14485.055497*0.000000-14485.055497*x(12))*(14485.055497*99999999.000000-14485.055497*x(12))+(14485.055497*0.000000-14485.055497*x(13))*(14485.055497*99999999.000000-14485.055497*x(13))+(14485.055497*0.000000-14485.055497*x(14))*(14485.055497*99999999.000000-14485.055497*x(14))+(14485.055497*0.000000-14485.055497*x(15))*(14485.055497*99999999.000000-14485.055497*x(15))+(14485.055497*0.000000-14485.055497*x(16))*(14485.055497*99999999.000000-14485.055497*x(16))+(14485.055497*0.000000-14485.055497*x(17))*(14485.055497*99999999.000000-14485.055497*x(17))+(14485.055497*0.000000-14485.055497*x(18))*(14485.055497*99999999.000000-14485.055497*x(18))+(14485.055497*0.000000-14485.055497*x(19))*(14485.055497*99999999.000000-14485.055497*x(19))+(14485.055497*0.000000-14485.055497*x(20))*(14485.055497*99999999.000000-14485.055497*x(20))+(14485.055497*0.000000-14485.055497*x(21))*(14485.055497*99999999.000000-14485.055497*x(21))+(14485.055497*0.000000-14485.055497*x(22))*(14485.055497*99999999.000000-14485.055497*x(22))+(14485.055497*0.000000-14485.055497*x(23))*(14485.055497*99999999.000000-14485.055497*x(23))+(14485.055497*0.000000-14485.055497*x(24))*(14485.055497*99999999.000000-14485.055497*x(24))+(14485.055497*0.000000-14485.055497*x(25))*(14485.055497*99999999.000000-14485.055497*x(25))+(14485.055497*0.000000-14485.055497*x(26))*(14485.055497*99999999.000000-14485.055497*x(26))+(14485.055497*0.000000-14485.055497*x(27))*(14485.055497*99999999.000000-14485.055497*x(27))+(14485.055497*0.000000-14485.055497*x(28))*(14485.055497*99999999.000000-14485.055497*x(28))+(14485.055497*0.000000-14485.055497*x(29))*(14485.055497*99999999.000000-14485.055497*x(29))+(14485.055497*0.000000-14485.055497*x(30))*(14485.055497*99999999.000000-14485.055497*x(30))";
    // string func = "(28970.110993*0.000000-28970.110993*x(16))*(28970.110993*99999999.000000-28970.110993*x(16))";
    // string func = "0.1*x(1)+(1.232300*0.000000-1.232300*x(3))*(1.232300*99999999.000000-1.232300*x(3))+(1.232300*0.000000-1.232300*x(3))*(1.232300*99999999.000000-1.232300*x(3))+(1.232300*0.000000-1.232300*x(0))*(1.232300*99999999.000000-1.232300*x(0))+(1.232300*0.000000-1.232300*x(1))*(1.232300*99999999.000000-1.232300*x(1))";
    // string func = "0.1*x(1)+(1.232300*0.000000-1.232300*x(3))*(1.232300*99999999.000000-1.232300*x(3))+(1.232300*0.000000-1.232300*x(1))*(1.232300*99999999.000000-1.232300*x(1))+(1.232300*0.000000-1.232300*x(2))*(1.232300*99999999.000000-1.232300*x(2))+(1.232300*0.000000-1.232300*x(3))*(1.232300*99999999.000000-1.232300*x(3))+(1.232300*0.000000-1.232300*x(4))*(1.232300*99999999.000000-1.232300*x(4))+(1.232300*0.000000-1.232300*x(5))*(1.232300*99999999.000000-1.232300*x(5))+(1.232300*0.000000-1.232300*x(6))*(1.232300*99999999.000000-1.232300*x(6))+(1.232300*0.000000-1.232300*x(7))*(1.232300*99999999.000000-1.232300*x(7))+(1.232300*0.000000-1.232300*x(8))*(1.232300*99999999.000000-1.232300*x(8))+(1.232300*0.000000-1.232300*x(9))*(1.232300*99999999.000000-1.232300*x(9))+(1.232300*0.000000-1.232300*x(10))*(1.232300*99999999.000000-1.232300*x(10))+(1.232300*0.000000-1.232300*x(11))*(1.232300*99999999.000000-1.232300*x(11))+(1.232300*0.000000-1.232300*x(12))*(1.232300*99999999.000000-1.232300*x(12))+(1.232300*0.000000-1.232300*x(13))*(1.232300*99999999.000000-1.232300*x(13))+(1.232300*0.000000-1.232300*x(14))*(1.232300*99999999.000000-1.232300*x(14))+(1.232300*0.000000-1.232300*x(15))*(1.232300*99999999.000000-1.232300*x(15))+(1.232300*0.000000-1.232300*x(16))*(1.232300*99999999.000000-1.232300*x(16))+(1.232300*0.000000-1.232300*x(17))*(1.232300*99999999.000000-1.232300*x(17))+(1.232300*0.000000-1.232300*x(18))*(1.232300*99999999.000000-1.232300*x(18))+(1.232300*0.000000-1.232300*x(19))*(1.232300*99999999.000000-1.232300*x(19))+(1.232300*0.000000-1.232300*x(20))*(1.232300*99999999.000000-1.232300*x(20))+(1.232300*0.000000-1.232300*x(21))*(1.232300*99999999.000000-1.232300*x(21))+(1.232300*0.000000-1.232300*x(22))*(1.232300*99999999.000000-1.232300*x(22))+(1.232300*0.000000-1.232300*x(23))*(1.232300*99999999.000000-1.232300*x(23))+(1.232300*0.000000-1.232300*x(24))*(1.232300*99999999.000000-1.232300*x(24))+(1.232300*0.000000-1.232300*x(25))*(1.232300*99999999.000000-1.232300*x(25))+(1.232300*0.000000-1.232300*x(26))*(1.232300*99999999.000000-1.232300*x(26))+(1.232300*0.000000-1.232300*x(27))*(1.232300*99999999.000000-1.232300*x(27))+(1.232300*0.000000-1.232300*x(28))*(1.232300*99999999.000000-1.232300*x(28))+(1.232300*0.000000-1.232300*x(29))*(1.232300*99999999.000000-1.232300*x(29))+(1.232300*0.000000-1.232300*x(30))*(1.232300*99999999.000000-1.232300*x(30))";
    const char* func_string = func.c_str();
    cout << "Non Convex Function: \n" << func << endl;
    Function f("x[30]",func_string);
    Function df(f,Function::DIFF);

    double _x[30][2] = {{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999},{0, 99999999}, {0, 99999999}};
    IntervalVector xy(30, _x); // build xy=([1,2],[3,4])
    // Interval z = f.eval(xy);  // z=f(xy)=sin([4,6])=[-1, -0.27941]

    // Computing the Interval Hessian Matrix
    IntervalMatrix im(30,30);
    for(int i = 0 ; i < 30 ; i++){
        Function new_f(df[i],Function::DIFF);
        for(int j = i ; j < 30 ; j++){
            im[i][j] = im[j][i] = new_f[j].eval(xy);
        }
    }
    // cout << z << endl;
    // cout << "Interval Matrix:\n";
    // cout << im << endl;
    cout << "Lower bound on Minimum Eigen Value:\n";
    double lowerBoundEigenValue = minEigenValueIntervalMatrix(im);
    cout << lowerBoundEigenValue << endl;
    double alpha = max(double(0), -0.5*lowerBoundEigenValue);
    string extra_func = "";
    for(int i = 1 ; i <= 30 ; i++){
        string lower_x = to_string(xy[i-1].lb());
        string x = "x("+to_string(i)+")";
        string lower_diff = "("+to_string(alpha) + "*" + lower_x+"-"+to_string(alpha) + "*" +x+")";
        string upper_x = to_string(xy[i-1].ub());
        string upper_diff = "("+to_string(alpha) + "*" + upper_x+"-"+to_string(alpha) + "*" +x+")";
        // string upper_diff = "("+upper_x+"-"+x+")";
        string multi_lower_upper_diff = lower_diff+"*"+upper_diff;
        extra_func += ("+" + multi_lower_upper_diff).c_str();
        cout << ("+" + multi_lower_upper_diff) << endl;
    }
    const char* new_func = (func+extra_func).c_str();
    cout << "New Convex Function: \n" << func+extra_func << endl;
    // Function f_new("x[30]",new_func);
    // Function df_new(f_new,Function::DIFF);

    // for(int i = 0 ; i < 30 ; i++){
    //     Function new_f(df_new[i],Function::DIFF);
    //     for(int j = i ; j < 30 ; j++){
    //         im[i][j] = im[j][i] = new_f[j].eval(xy);
    //     }
    // }
    // // cout << z << endl;
    // // cout << "Interval Matrix:\n";
    // // cout << im << endl;
    // cout << "Lower bound on Minimum Eigen Value of Convex Lower bound:\n";
    // lowerBoundEigenValue = minEigenValueIntervalMatrix(im);
    // cout << lowerBoundEigenValue << endl;

}



// +(1.232300*0.000000-1.232300*x(1))*(1.232300*99999999.000000-1.232300*x(1))
// +(1.232300*0.000000-1.232300*x(2))*(1.232300*99999999.000000-1.232300*x(2))
// +(1.232300*0.000000-1.232300*x(3))*(1.232300*99999999.000000-1.232300*x(3))
// +(1.232300*0.000000-1.232300*x(4))*(1.232300*99999999.000000-1.232300*x(4))
// +(1.232300*0.000000-1.232300*x(5))*(1.232300*99999999.000000-1.232300*x(5))
// +(1.232300*0.000000-1.232300*x(6))*(1.232300*99999999.000000-1.232300*x(6))
// +(1.232300*0.000000-1.232300*x(7))*(1.232300*99999999.000000-1.232300*x(7))
// +(1.232300*0.000000-1.232300*x(8))*(1.232300*99999999.000000-1.232300*x(8))
// +(1.232300*0.000000-1.232300*x(9))*(1.232300*99999999.000000-1.232300*x(9))
// +(1.232300*0.000000-1.232300*x(10))*(1.232300*99999999.000000-1.232300*x(10))
// +(1.232300*0.000000-1.232300*x(11))*(1.232300*99999999.000000-1.232300*x(11))
// +(1.232300*0.000000-1.232300*x(12))*(1.232300*99999999.000000-1.232300*x(12))
// +(1.232300*0.000000-1.232300*x(13))*(1.232300*99999999.000000-1.232300*x(13))
// +(1.232300*0.000000-1.232300*x(14))*(1.232300*99999999.000000-1.232300*x(14))
// +(1.232300*0.000000-1.232300*x(15))*(1.232300*99999999.000000-1.232300*x(15))
// +(1.232300*0.000000-1.232300*x(16))*(1.232300*99999999.000000-1.232300*x(16))
// +(1.232300*0.000000-1.232300*x(17))*(1.232300*99999999.000000-1.232300*x(17))
// +(1.232300*0.000000-1.232300*x(18))*(1.232300*99999999.000000-1.232300*x(18))
// +(1.232300*0.000000-1.232300*x(19))*(1.232300*99999999.000000-1.232300*x(19))
// +(1.232300*0.000000-1.232300*x(20))*(1.232300*99999999.000000-1.232300*x(20))
// +(1.232300*0.000000-1.232300*x(21))*(1.232300*99999999.000000-1.232300*x(21))
// +(1.232300*0.000000-1.232300*x(22))*(1.232300*99999999.000000-1.232300*x(22))
// +(1.232300*0.000000-1.232300*x(23))*(1.232300*99999999.000000-1.232300*x(23))
// +(1.232300*0.000000-1.232300*x(24))*(1.232300*99999999.000000-1.232300*x(24))
// +(1.232300*0.000000-1.232300*x(25))*(1.232300*99999999.000000-1.232300*x(25))
// +(1.232300*0.000000-1.232300*x(26))*(1.232300*99999999.000000-1.232300*x(26))
// +(1.232300*0.000000-1.232300*x(27))*(1.232300*99999999.000000-1.232300*x(27))
// +(1.232300*0.000000-1.232300*x(28))*(1.232300*99999999.000000-1.232300*x(28))
// +(1.232300*0.000000-1.232300*x(29))*(1.232300*99999999.000000-1.232300*x(29))
// +(1.232300*0.000000-1.232300*x(30))*(1.232300*99999999.000000-1.232300*x(30))
